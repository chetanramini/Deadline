generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus { PENDING DONE MISSED AT_RISK }
enum BlockStatus { PLANNED DONE MISSED RESCHEDULED }

model User {
  id        String   @id @db.VarChar(36)          // "demo-user" for M1–M4
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  tasks     Task[]
}

model Task {
  id          String      @id @db.VarChar(26)     // ULID
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  course      String?
  description String?
  dueAt       DateTime    @db.Timestamptz(6)
  estHours    Int         @db.SmallInt            // 1–40 (validated in API)
  weight      Int         @default(3) @db.SmallInt
  status      TaskStatus  @default(PENDING)
  blocks      Block[]
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)

  @@index([userId, dueAt])
  @@index([userId, status, dueAt])
  @@index([userId, course, dueAt])
}

model Block {
  id        String      @id @db.VarChar(26)       // ULID
  taskId    String
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  start     DateTime    @db.Timestamptz(6)
  end       DateTime    @db.Timestamptz(6)
  status    BlockStatus @default(PLANNED)
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt DateTime    @updatedAt @db.Timestamptz(6)

  @@index([taskId])
  @@index([start, end])
}
